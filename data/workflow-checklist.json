{
  "version": "1.0.0",
  "sections": [
    {
      "id": "environment-setup",
      "title": "üöÄ Environment Setup",
      "description": "Get your development environment ready for AI-powered development",
      "icon": "‚öôÔ∏è",
      "tasks": [
        {
          "id": "sync-repository",
          "title": "Sync Repository",
          "description": "Sync your local repository with latest remote changes (team collaboration)",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "1 min",
          "completed": false,
          "commands": [
            "git status",
            "git pull origin main"
          ],
          "documentation": "/TEAM_SETUP.md#team-collaboration-sync",
          "note": "Run this daily to stay in sync with team changes"
        },
        {
          "id": "clone-repo",
          "title": "Clone Repository",
          "description": "Clone the shipsmind_speckit repository to your local machine (first time only)",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "commands": ["git clone <repository-url>", "cd shipsmind_speckit"],
          "documentation": "/README.md",
          "note": "Skip if repository already cloned"
        },
        {
          "id": "install-dependencies",
          "title": "Install Dependencies",
          "description": "Install all project dependencies using pnpm",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "3 min",
          "completed": false,
          "dependencies": ["sync-repository"],
          "commands": ["pnpm install"],
          "autoDetectable": true
        },
        {
          "id": "setup-environment",
          "title": "Setup Environment Variables",
          "description": "Copy and configure environment variables",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "dependencies": ["sync-repository"],
          "commands": ["cp .env.example .env.local"],
          "documentation": "/TEAM_SETUP.md#environment-setup"
        },
        {
          "id": "start-docker",
          "title": "Start Docker Services",
          "description": "Start development database and supporting services",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "dependencies": ["install-dependencies"],
          "commands": ["pnpm docker:dev"],
          "autoDetectable": true
        },
        {
          "id": "setup-database",
          "title": "Initialize Database",
          "description": "Generate Prisma client and push schema to database",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "dependencies": ["start-docker"],
          "commands": ["pnpm db:generate", "pnpm db:push"]
        },
        {
          "id": "install-specify",
          "title": "Verify Specify CLI Integration",
          "description": "Verify GitHub Specify CLI is working (installed automatically with project dependencies)",
          "category": "setup",
          "priority": "medium",
          "estimatedTime": "1 min",
          "completed": false,
          "dependencies": ["install-dependencies"],
          "commands": [
            "pnpm specify:check"
          ],
          "documentation": "/docs/github-spec-kit-integration.md",
          "autoDetectable": true
        },
        {
          "id": "install-mcp-servers",
          "title": "Install MCP Servers",
          "description": "Install all MCP servers for enhanced AI capabilities",
          "category": "setup",
          "priority": "medium",
          "estimatedTime": "5 min",
          "completed": false,
          "commands": [
            "claude mcp add playwright -- npx @playwright/mcp@latest",
            "claude mcp add context7 -- npx -y @upstash/context7-mcp --api-key YOUR_CONTEXT7_API_KEY",
            "claude mcp add --transport http github https://api.githubcopilot.com/mcp -H \"Authorization: Bearer YOUR_GITHUB_PAT\"",
            "claude mcp add --transport http shadcn https://www.shadcn.io/api/mcp"
          ],
          "autoDetectable": true,
          "documentation": "/TEAM_SETUP.md#ai-powered-development-workflow"
        },
        {
          "id": "verify-setup",
          "title": "Verify Complete Setup",
          "description": "Check that all services are running correctly",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "dependencies": ["setup-database", "install-mcp-servers"],
          "commands": ["pnpm dev", "claude mcp list", "docker ps"],
          "expectedOutput": {
            "mcpServers": [
              "playwright: Browser automation & testing - Connected",
              "context7: Up-to-date documentation - Connected",
              "github: GitHub repository integration - Connected",
              "shadcn: shadcn/ui component library - Connected"
            ]
          },
          "autoDetectable": true,
          "nextSteps": {
            "title": "üéâ Setup Complete! Ready for Development",
            "description": "Your development environment is ready. Check your assigned tasks and start building!",
            "actions": [
              {
                "title": "View Your Linear Issues",
                "description": "Check assigned development tasks in Linear",
                "url": "https://linear.app",
                "type": "external"
              },
              {
                "title": "Visit Feature Dashboard",
                "description": "View project features and specifications",
                "url": "/dev/features",
                "type": "internal"
              }
            ]
          }
        }
      ]
    },
    {
      "id": "mcp-configuration",
      "title": "ü§ñ MCP Server Setup",
      "description": "Configure Model Context Protocol servers for enhanced AI capabilities",
      "icon": "üîå",
      "tasks": [
        {
          "id": "verify-mcp-status",
          "title": "Check MCP Server Status",
          "description": "Verify all MCP servers are connected and working",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "1 min",
          "completed": false,
          "dependencies": ["install-mcp-servers"],
          "commands": ["claude mcp list"],
          "autoDetectable": true,
          "expectedOutput": {
            "mcpServers": [
              "playwright: npx @playwright/mcp@latest - ‚úì Connected",
              "context7: npx -y @upstash/context7-mcp --api-key [HIDDEN] - ‚úì Connected",
              "github: https://api.githubcopilot.com/mcp (HTTP) - ‚úì Connected",
              "shadcn: https://www.shadcn.io/api/mcp (HTTP) - ‚úì Connected"
            ]
          }
        },
        {
          "id": "test-mcp-functionality",
          "title": "Test MCP Functionality",
          "description": "Test each MCP server to ensure they're working correctly",
          "category": "setup",
          "priority": "medium",
          "estimatedTime": "3 min",
          "completed": false,
          "dependencies": ["verify-mcp-status"],
          "commands": [
            "# Test Context7: Ask Claude to 'use context7' for documentation",
            "# Test GitHub: Verify GitHub repository access",
            "# Test shadcn: Query available components",
            "# Test Playwright: Browser automation capabilities"
          ]
        }
      ]
    },
    {
      "id": "backend-development",
      "title": "üîß Backend Development",
      "description": "Database design, API development, and backend integration with Supabase",
      "icon": "‚öôÔ∏è",
      "tasks": [
        {
          "id": "analyze-database-schema",
          "title": "Analyze Current Database Schema",
          "description": "Use Supabase MCP to understand existing database structure and relationships",
          "category": "backend",
          "priority": "high",
          "estimatedTime": "5 min",
          "completed": false,
          "commands": [
            "# Use Claude Code with Supabase MCP:",
            "\"Analyze my Supabase database schema and show me all tables, relationships, and constraints\"",
            "\"Generate documentation for the current database structure\""
          ],
          "documentation": "/docs/backend-development-workflow.md#database-analysis"
        },
        {
          "id": "design-database-changes",
          "title": "Design Database Schema Changes",
          "description": "Plan and design any new tables, columns, or relationships needed for your feature",
          "category": "backend",
          "priority": "high",
          "estimatedTime": "10 min",
          "completed": false,
          "dependencies": ["analyze-database-schema"],
          "commands": [
            "# Use Supabase MCP for schema design:",
            "\"Help me design database tables for [feature description]. Consider relationships, indexes, and constraints.\"",
            "\"Generate SQL migration scripts for the new schema changes\""
          ],
          "documentation": "/docs/backend-development-workflow.md#schema-design"
        },
        {
          "id": "implement-database-migrations",
          "title": "Implement Database Migrations",
          "description": "Apply database schema changes using Supabase dashboard or SQL scripts",
          "category": "backend",
          "priority": "high",
          "estimatedTime": "5 min",
          "completed": false,
          "dependencies": ["design-database-changes"],
          "commands": [
            "# Execute in Supabase SQL Editor or locally:",
            "-- Run generated migration scripts",
            "-- Verify tables created correctly",
            "-- Test constraints and relationships"
          ],
          "note": "Always backup database before running migrations in production"
        },
        {
          "id": "develop-api-endpoints",
          "title": "Develop API Endpoints",
          "description": "Create Next.js API routes that interact with your Supabase database",
          "category": "backend",
          "priority": "medium",
          "estimatedTime": "15 min",
          "completed": false,
          "dependencies": ["implement-database-migrations"],
          "commands": [
            "# Use Claude Code to generate API routes:",
            "\"Create Next.js API endpoints for [feature] that use Supabase client\"",
            "\"Add proper error handling and validation to the API routes\""
          ],
          "documentation": "/docs/backend-development-workflow.md#api-development"
        },
        {
          "id": "implement-authentication",
          "title": "Implement Authentication & Authorization",
          "description": "Set up user authentication and role-based access control",
          "category": "backend",
          "priority": "high",
          "estimatedTime": "10 min",
          "completed": false,
          "dependencies": ["develop-api-endpoints"],
          "commands": [
            "# Integrate Clerk with Supabase:",
            "\"Help me set up Clerk authentication with Supabase database integration\"",
            "\"Create middleware for API route protection and role-based access\""
          ],
          "documentation": "/docs/backend-development-workflow.md#authentication"
        },
        {
          "id": "test-backend-functionality",
          "title": "Test Backend Functionality",
          "description": "Test API endpoints, database operations, and authentication flows",
          "category": "backend",
          "priority": "medium",
          "estimatedTime": "10 min",
          "completed": false,
          "dependencies": ["implement-authentication"],
          "commands": [
            "# Test API endpoints:",
            "curl http://localhost:3000/api/[endpoint]",
            "# Use Supabase MCP to verify data:",
            "\"Query the database to verify my API operations are working correctly\""
          ],
          "documentation": "/docs/backend-development-workflow.md#testing"
        },
        {
          "id": "optimize-database-performance",
          "title": "Optimize Database Performance",
          "description": "Add indexes, optimize queries, and ensure efficient database operations",
          "category": "backend",
          "priority": "low",
          "estimatedTime": "8 min",
          "completed": false,
          "dependencies": ["test-backend-functionality"],
          "commands": [
            "# Use Supabase MCP for optimization:",
            "\"Analyze my database queries and suggest performance optimizations\"",
            "\"Generate SQL for adding appropriate indexes to improve query performance\""
          ],
          "documentation": "/docs/backend-development-workflow.md#performance-optimization"
        }
      ]
    },
    {
      "id": "remote-ssh-setup",
      "title": "üåê Remote SSH Development",
      "description": "Configure secure remote development via Cloudflare tunnel",
      "icon": "üîó",
      "tasks": [
        {
          "id": "install-cloudflared",
          "title": "Install cloudflared",
          "description": "Download and install Cloudflare tunnel client",
          "category": "setup",
          "priority": "medium",
          "estimatedTime": "3 min",
          "completed": false,
          "commands": [
            "New-Item -ItemType Directory -Path \"C:\\cloudflared\" -Force",
            "Invoke-WebRequest -Uri \"https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe\" -OutFile \"C:\\cloudflared\\cloudflared.exe\"",
            "C:\\cloudflared\\cloudflared.exe version"
          ],
          "documentation": "/TEAM_SETUP.md#remote-development-via-ssh-tunnel"
        },
        {
          "id": "setup-cloudflared-path",
          "title": "Configure cloudflared PATH",
          "description": "Add cloudflared to system PATH for easy access",
          "category": "setup",
          "priority": "medium",
          "estimatedTime": "2 min",
          "completed": false,
          "dependencies": ["install-cloudflared"],
          "commands": [
            "$env:PATH += \";C:\\cloudflared\"",
            "$userPath = [Environment]::GetEnvironmentVariable(\"PATH\", [EnvironmentVariableTarget]::User)",
            "[Environment]::SetEnvironmentVariable(\"PATH\", \"$userPath;C:\\cloudflared\", [EnvironmentVariableTarget]::User)",
            "cloudflared version"
          ]
        },
        {
          "id": "generate-ssh-keys",
          "title": "Generate SSH Key Pair",
          "description": "Create SSH keys for secure authentication",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "commands": ["ssh-keygen -t ed25519 -f shipsmind-key"]
        },
        {
          "id": "copy-ssh-key-to-server",
          "title": "Copy SSH Key to Server",
          "description": "Set up key-based authentication on the Ubuntu server",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "3 min",
          "completed": false,
          "dependencies": ["generate-ssh-keys"],
          "commands": [
            "scp shipsmind-key.pub mike@192.168.0.103:~/",
            "ssh mike@192.168.0.103",
            "mkdir -p ~/.ssh && chmod 700 ~/.ssh",
            "cat ~/shipsmind-key.pub >> ~/.ssh/authorized_keys",
            "chmod 600 ~/.ssh/authorized_keys && rm ~/shipsmind-key.pub && exit"
          ],
          "note": "This step requires LAN access or admin assistance"
        },
        {
          "id": "authenticate-cloudflare",
          "title": "Authenticate with Cloudflare",
          "description": "Login to Cloudflare tunnel service",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "dependencies": ["setup-cloudflared-path"],
          "commands": ["cloudflared tunnel login", "cloudflared tunnel list"]
        },
        {
          "id": "create-ssh-config",
          "title": "Create SSH Config",
          "description": "Configure SSH client for tunnel access",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "3 min",
          "completed": false,
          "dependencies": ["authenticate-cloudflare", "copy-ssh-key-to-server"],
          "commands": [
            "# Create C:\\Users\\[Username]\\.ssh\\config with:",
            "Host shipsmind-remote",
            "    HostName ssh.shipsmind.com",
            "    User mike",
            "    IdentityFile C:\\Users\\[Username]\\shipsmind-key",
            "    ProxyCommand cloudflared access ssh --hostname %h",
            "    ServerAliveInterval 30",
            "    ServerAliveCountMax 3"
          ]
        },
        {
          "id": "test-ssh-connection",
          "title": "Test SSH Connection",
          "description": "Verify remote SSH access works",
          "category": "setup",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "dependencies": ["create-ssh-config"],
          "commands": ["ssh shipsmind-remote"],
          "autoDetectable": true
        },
        {
          "id": "setup-vscode-remote",
          "title": "Configure VS Code Remote-SSH",
          "description": "Set up VS Code for remote development",
          "category": "setup",
          "priority": "medium",
          "estimatedTime": "5 min",
          "completed": false,
          "dependencies": ["test-ssh-connection"],
          "commands": [
            "# Install Remote-SSH extension in VS Code",
            "# Press Ctrl+Shift+P ‚Üí 'Remote-SSH: Connect to Host'",
            "# Select 'shipsmind-remote'",
            "# Navigate to project directory on remote server"
          ],
          "documentation": "/TEAM_SETUP.md#vs-code-remote-development-setup"
        }
      ]
    },
    {
      "id": "frontend-design",
      "title": "üé® Front-End Design",
      "description": "Modern UI/UX design workflow with SuperDesign and component libraries",
      "icon": "üñåÔ∏è",
      "tasks": [
        {
          "id": "install-superdesign",
          "title": "Install SuperDesign Extension",
          "description": "Install the SuperDesign VS Code extension for interactive design workflow",
          "category": "design",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "commands": [
            "# Install via VS Code Extensions",
            "# Search for 'SuperDesign' and install",
            "# Open Command Palette (Ctrl+Shift+P)",
            "# Type 'SuperDesign' and select canvas view"
          ],
          "documentation": "/docs/frontend-design-workflow.md#install-superdesign-extension"
        },
        {
          "id": "initialize-superdesign",
          "title": "Initialize SuperDesign",
          "description": "Set up SuperDesign configuration for Claude Code integration",
          "category": "design",
          "priority": "high",
          "estimatedTime": "1 min",
          "completed": false,
          "dependencies": ["install-superdesign"],
          "commands": [
            "# Command Palette: 'Initialize SuperDesign'",
            "# This creates claude.md in home directory with design context"
          ]
        },
        {
          "id": "design-layout-phase",
          "title": "Design Layout Phase",
          "description": "Create 3-5 layout iterations using ASCII visualization",
          "category": "design",
          "priority": "high",
          "estimatedTime": "10 min",
          "completed": false,
          "dependencies": ["initialize-superdesign"],
          "commands": [
            "/design-layout \"Create 5 layout iterations for [component/page] using SuperDesign workflow. Use ASCII format for quick visualization.\""
          ],
          "documentation": "/docs/frontend-design-workflow.md#stage-1-layout-phase"
        },
        {
          "id": "design-theme-phase",
          "title": "Design Theme Phase",
          "description": "Apply visual design language and styling variations",
          "category": "design",
          "priority": "high",
          "estimatedTime": "15 min",
          "completed": false,
          "dependencies": ["design-layout-phase"],
          "commands": [
            "# Generate color palette at colors.co",
            "/design-theme \"Create 5 theme variations with different design languages. Apply the color palette and focus on modern, glass morphism, professional styles.\""
          ],
          "documentation": "/docs/frontend-design-workflow.md#stage-2-theme-design"
        },
        {
          "id": "implement-interactivity",
          "title": "Implement Interactivity",
          "description": "Add animations, click effects, and interactive elements",
          "category": "design",
          "priority": "high",
          "estimatedTime": "10 min",
          "completed": false,
          "dependencies": ["design-theme-phase"],
          "commands": [
            "/design-implement \"Implement the selected design with full interactivity. Add click animations, hover effects, and ensure all elements are functional.\""
          ],
          "documentation": "/docs/frontend-design-workflow.md#stage-3-implementation-animation"
        },
        {
          "id": "component-implementation",
          "title": "Component Library Implementation",
          "description": "Convert design to production components using shadcn",
          "category": "design",
          "priority": "medium",
          "estimatedTime": "20 min",
          "completed": false,
          "dependencies": ["implement-interactivity"],
          "commands": [
            "/shadcn \"Plan the app implementation using shadcn components. Create implementation plan in implementation.md.\"",
            "/shadcn \"Implement the app according to the implementation plan using shadcn MCP.\""
          ],
          "documentation": "/docs/frontend-design-workflow.md#method-1-shadcn-component-implementation"
        },
        {
          "id": "theme-customization",
          "title": "Theme Customization",
          "description": "Apply custom themes using TweakCN for shadcn components",
          "category": "design",
          "priority": "low",
          "estimatedTime": "5 min",
          "completed": false,
          "dependencies": ["component-implementation"],
          "commands": [
            "# Browse themes at tweak-cn.vercel.app",
            "\"Apply this TweakCN theme to our shadcn components: [paste CSS]\""
          ],
          "documentation": "/docs/frontend-design-workflow.md#method-2-custom-theme-application"
        }
      ]
    },
    {
      "id": "feature-development",
      "title": "üõ†Ô∏è Feature Development",
      "description": "Spec-driven development workflow with AI assistance",
      "icon": "üíª",
      "tasks": [
        {
          "id": "create-specification",
          "title": "Create Feature Specification",
          "description": "Use Specify CLI to describe what you want to build, or work on an assigned Linear issue",
          "category": "development",
          "priority": "high",
          "estimatedTime": "10 min",
          "completed": false,
          "commands": [
            "# Option 1: Create new specification",
            "pnpm specify init",
            "pnpm specify -- specify \"Your feature description\"",
            "",
            "# Option 2: Work on assigned Linear issue",
            "# Check your assigned issues: https://linear.app",
            "# Create branch: git checkout -b feature/[issue-id]-description"
          ],
          "documentation": "/TEAM_SETUP.md#spec-driven-development-process",
          "relatedLinks": [
            {
              "title": "Linear Issues",
              "url": "https://linear.app",
              "description": "Check your assigned development tasks"
            }
          ]
        },
        {
          "id": "generate-plan",
          "title": "Generate Technical Plan",
          "description": "Generate implementation approach and architecture",
          "category": "development",
          "priority": "high",
          "estimatedTime": "5 min",
          "completed": false,
          "dependencies": ["create-specification"],
          "commands": ["pnpm specify -- plan"]
        },
        {
          "id": "break-into-tasks",
          "title": "Break Down into Tasks",
          "description": "Create actionable development tasks",
          "category": "development",
          "priority": "high",
          "estimatedTime": "5 min",
          "completed": false,
          "dependencies": ["generate-plan"],
          "commands": ["pnpm specify -- tasks"]
        },
        {
          "id": "implement-feature",
          "title": "Implement with Claude Code",
          "description": "Use Claude Code to implement the planned features",
          "category": "development",
          "priority": "high",
          "estimatedTime": "30-60 min",
          "completed": false,
          "dependencies": ["break-into-tasks"],
          "documentation": "/TEAM_SETUP.md#using-specify-for-feature-development"
        }
      ]
    },
    {
      "id": "ai-review-workflow",
      "title": "ü§ñ AI Review Workflow",
      "description": "Comprehensive code, design, and security reviews",
      "icon": "üîç",
      "tasks": [
        {
          "id": "pragmatic-code-review",
          "title": "Pragmatic Code Review",
          "description": "Comprehensive code quality and architecture review",
          "category": "review",
          "priority": "high",
          "estimatedTime": "5 min",
          "completed": false,
          "dependencies": ["implement-feature"],
          "commands": ["/pragmatic-code-review"],
          "documentation": "/.claude/agents/pragmatic-code-review.md"
        },
        {
          "id": "design-review",
          "title": "Design Review",
          "description": "UI/UX validation with design workflow agent",
          "category": "review",
          "priority": "medium",
          "estimatedTime": "10 min",
          "completed": false,
          "dependencies": ["implement-feature"],
          "commands": ["/design-review"],
          "documentation": "/.claude/commands/design-review.md"
        },
        {
          "id": "design-agent-review",
          "title": "Design Agent Review",
          "description": "Comprehensive design evaluation using specialized design workflow agent",
          "category": "review",
          "priority": "high",
          "estimatedTime": "15 min",
          "completed": false,
          "dependencies": ["implement-feature"],
          "commands": ["/design-agent \"Review the implemented feature for design quality, accessibility, and user experience. Ensure it meets modern design standards and is ready for production.\""],
          "documentation": "/.claude/agents/design-workflow.md"
        },
        {
          "id": "security-review",
          "title": "Security Review",
          "description": "Security vulnerability analysis and OWASP compliance",
          "category": "review",
          "priority": "high",
          "estimatedTime": "5 min",
          "completed": false,
          "dependencies": ["implement-feature"],
          "commands": ["/security-review"],
          "documentation": "/.claude/commands/security-review.md"
        },
        {
          "id": "fix-review-issues",
          "title": "Address Review Feedback",
          "description": "Fix any critical or high-priority issues found in reviews",
          "category": "review",
          "priority": "high",
          "estimatedTime": "15-30 min",
          "completed": false,
          "dependencies": [
            "pragmatic-code-review",
            "design-review",
            "security-review"
          ]
        }
      ]
    },
    {
      "id": "testing-validation",
      "title": "‚úÖ Testing & Validation",
      "description": "Ensure code quality and functionality",
      "icon": "üß™",
      "tasks": [
        {
          "id": "run-linting",
          "title": "Run Code Linting",
          "description": "Check code style and fix automatic issues",
          "category": "review",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "commands": ["pnpm lint", "pnpm lint:fix"],
          "autoDetectable": true
        },
        {
          "id": "type-checking",
          "title": "TypeScript Type Checking",
          "description": "Verify all TypeScript types are correct",
          "category": "review",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "commands": ["pnpm type-check"],
          "autoDetectable": true
        },
        {
          "id": "format-code",
          "title": "Format Code",
          "description": "Ensure consistent code formatting",
          "category": "review",
          "priority": "medium",
          "estimatedTime": "1 min",
          "completed": false,
          "commands": ["pnpm format"],
          "autoDetectable": true
        },
        {
          "id": "test-locally",
          "title": "Test in Development",
          "description": "Manual testing of new features in dev environment",
          "category": "review",
          "priority": "high",
          "estimatedTime": "10 min",
          "completed": false,
          "dependencies": ["run-linting", "type-checking"],
          "commands": ["pnpm dev"]
        },
        {
          "id": "build-production",
          "title": "Test Production Build",
          "description": "Verify the application builds successfully for production",
          "category": "review",
          "priority": "high",
          "estimatedTime": "3 min",
          "completed": false,
          "dependencies": ["test-locally"],
          "commands": ["pnpm build"],
          "autoDetectable": true
        }
      ]
    },
    {
      "id": "git-workflow",
      "title": "üìù Git Workflow",
      "description": "Commit changes and create pull requests",
      "icon": "üîÄ",
      "tasks": [
        {
          "id": "stage-changes",
          "title": "Stage Changes",
          "description": "Add your changes to git staging area",
          "category": "deployment",
          "priority": "high",
          "estimatedTime": "1 min",
          "completed": false,
          "dependencies": ["build-production"],
          "commands": ["git add ."],
          "autoDetectable": true
        },
        {
          "id": "commit-changes",
          "title": "Commit Changes",
          "description": "Create a descriptive commit message with Linear issue reference",
          "category": "deployment",
          "priority": "high",
          "estimatedTime": "2 min",
          "completed": false,
          "dependencies": ["stage-changes"],
          "commands": [
            "# Link to Linear issue (auto-updates issue status):",
            "git commit -m \"Add feature implementation - Refs DEV-2\"",
            "",
            "# Or for general commits:",
            "git commit -m \"Your descriptive commit message\""
          ],
          "documentation": "/PRODUCTION_DEPLOYMENT.md#committing-changes-with-git",
          "tips": [
            "Use 'Refs [ISSUE-ID]' to link commits to Linear issues",
            "Use 'Fixes [ISSUE-ID]' to auto-close Linear issues when PR merges",
            "GitHub integration will update Linear issue timeline automatically"
          ]
        },
        {
          "id": "push-branch",
          "title": "Push to Remote",
          "description": "Push your feature branch to remote repository",
          "category": "deployment",
          "priority": "high",
          "estimatedTime": "1 min",
          "completed": false,
          "dependencies": ["commit-changes"],
          "commands": ["git push origin your-feature-branch"]
        },
        {
          "id": "create-pull-request",
          "title": "Create Pull Request",
          "description": "Create PR for team review and automated CI checks",
          "category": "deployment",
          "priority": "high",
          "estimatedTime": "5 min",
          "completed": false,
          "dependencies": ["push-branch"],
          "commands": [
            "gh pr create --title \"Your PR title\" --body \"Description\""
          ],
          "documentation": "/.github/workflows/claude-code-review.yml"
        }
      ]
    }
  ]
}
